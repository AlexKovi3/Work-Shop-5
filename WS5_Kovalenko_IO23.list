
WS5_Kovalenko_IO23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004150  08004150  00005150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004170  08004170  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004170  08004170  00005170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004178  08004178  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004178  08004178  00005178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800417c  0800417c  0000517c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004180  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000001e8  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001f4  200001f4  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b1a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c8b  00000000  00000000  0000fb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  000117e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000751  00000000  00000000  00012168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe3e  00000000  00000000  000128b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0a2  00000000  00000000  000326f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c103c  00000000  00000000  0003f799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001007d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026b0  00000000  00000000  00100818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  00102ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004138 	.word	0x08004138

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004138 	.word	0x08004138

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CS43L22_Init>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void CS43L22_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
	// Enable chip
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2110      	movs	r1, #16
 80004fe:	4863      	ldr	r0, [pc, #396]	@ (800068c <CS43L22_Init+0x198>)
 8000500:	f001 fe0e 	bl	8002120 <HAL_GPIO_WritePin>

	uint8_t TxBuffer[2];

	TxBuffer[0] = 0x0D; TxBuffer[1] = 0x01;
 8000504:	230d      	movs	r3, #13
 8000506:	713b      	strb	r3, [r7, #4]
 8000508:	2301      	movs	r3, #1
 800050a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800050c:	1d3a      	adds	r2, r7, #4
 800050e:	230a      	movs	r3, #10
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2302      	movs	r3, #2
 8000514:	2194      	movs	r1, #148	@ 0x94
 8000516:	485e      	ldr	r0, [pc, #376]	@ (8000690 <CS43L22_Init+0x19c>)
 8000518:	f001 ff60 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x00; TxBuffer[1] = 0x99;
 800051c:	2300      	movs	r3, #0
 800051e:	713b      	strb	r3, [r7, #4]
 8000520:	2399      	movs	r3, #153	@ 0x99
 8000522:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000524:	1d3a      	adds	r2, r7, #4
 8000526:	230a      	movs	r3, #10
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2302      	movs	r3, #2
 800052c:	2194      	movs	r1, #148	@ 0x94
 800052e:	4858      	ldr	r0, [pc, #352]	@ (8000690 <CS43L22_Init+0x19c>)
 8000530:	f001 ff54 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x47; TxBuffer[1] = 0x80;
 8000534:	2347      	movs	r3, #71	@ 0x47
 8000536:	713b      	strb	r3, [r7, #4]
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800053c:	1d3a      	adds	r2, r7, #4
 800053e:	230a      	movs	r3, #10
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2302      	movs	r3, #2
 8000544:	2194      	movs	r1, #148	@ 0x94
 8000546:	4852      	ldr	r0, [pc, #328]	@ (8000690 <CS43L22_Init+0x19c>)
 8000548:	f001 ff48 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x32; TxBuffer[1] = 0xFF;
 800054c:	2332      	movs	r3, #50	@ 0x32
 800054e:	713b      	strb	r3, [r7, #4]
 8000550:	23ff      	movs	r3, #255	@ 0xff
 8000552:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000554:	1d3a      	adds	r2, r7, #4
 8000556:	230a      	movs	r3, #10
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2302      	movs	r3, #2
 800055c:	2194      	movs	r1, #148	@ 0x94
 800055e:	484c      	ldr	r0, [pc, #304]	@ (8000690 <CS43L22_Init+0x19c>)
 8000560:	f001 ff3c 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x32; TxBuffer[1] = 0x7F;
 8000564:	2332      	movs	r3, #50	@ 0x32
 8000566:	713b      	strb	r3, [r7, #4]
 8000568:	237f      	movs	r3, #127	@ 0x7f
 800056a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800056c:	1d3a      	adds	r2, r7, #4
 800056e:	230a      	movs	r3, #10
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2302      	movs	r3, #2
 8000574:	2194      	movs	r1, #148	@ 0x94
 8000576:	4846      	ldr	r0, [pc, #280]	@ (8000690 <CS43L22_Init+0x19c>)
 8000578:	f001 ff30 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x00; TxBuffer[1] = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	713b      	strb	r3, [r7, #4]
 8000580:	2300      	movs	r3, #0
 8000582:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000584:	1d3a      	adds	r2, r7, #4
 8000586:	230a      	movs	r3, #10
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2302      	movs	r3, #2
 800058c:	2194      	movs	r1, #148	@ 0x94
 800058e:	4840      	ldr	r0, [pc, #256]	@ (8000690 <CS43L22_Init+0x19c>)
 8000590:	f001 ff24 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x04; TxBuffer[1] = 0xAF;
 8000594:	2304      	movs	r3, #4
 8000596:	713b      	strb	r3, [r7, #4]
 8000598:	23af      	movs	r3, #175	@ 0xaf
 800059a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800059c:	1d3a      	adds	r2, r7, #4
 800059e:	230a      	movs	r3, #10
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2302      	movs	r3, #2
 80005a4:	2194      	movs	r1, #148	@ 0x94
 80005a6:	483a      	ldr	r0, [pc, #232]	@ (8000690 <CS43L22_Init+0x19c>)
 80005a8:	f001 ff18 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x0D; TxBuffer[1] = 0x70;
 80005ac:	230d      	movs	r3, #13
 80005ae:	713b      	strb	r3, [r7, #4]
 80005b0:	2370      	movs	r3, #112	@ 0x70
 80005b2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	230a      	movs	r3, #10
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2302      	movs	r3, #2
 80005bc:	2194      	movs	r1, #148	@ 0x94
 80005be:	4834      	ldr	r0, [pc, #208]	@ (8000690 <CS43L22_Init+0x19c>)
 80005c0:	f001 ff0c 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x05; TxBuffer[1] = 0x81;
 80005c4:	2305      	movs	r3, #5
 80005c6:	713b      	strb	r3, [r7, #4]
 80005c8:	2381      	movs	r3, #129	@ 0x81
 80005ca:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005cc:	1d3a      	adds	r2, r7, #4
 80005ce:	230a      	movs	r3, #10
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2302      	movs	r3, #2
 80005d4:	2194      	movs	r1, #148	@ 0x94
 80005d6:	482e      	ldr	r0, [pc, #184]	@ (8000690 <CS43L22_Init+0x19c>)
 80005d8:	f001 ff00 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x06; TxBuffer[1] = 0x07;
 80005dc:	2306      	movs	r3, #6
 80005de:	713b      	strb	r3, [r7, #4]
 80005e0:	2307      	movs	r3, #7
 80005e2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005e4:	1d3a      	adds	r2, r7, #4
 80005e6:	230a      	movs	r3, #10
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	2194      	movs	r1, #148	@ 0x94
 80005ee:	4828      	ldr	r0, [pc, #160]	@ (8000690 <CS43L22_Init+0x19c>)
 80005f0:	f001 fef4 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x0A; TxBuffer[1] = 0x00;
 80005f4:	230a      	movs	r3, #10
 80005f6:	713b      	strb	r3, [r7, #4]
 80005f8:	2300      	movs	r3, #0
 80005fa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005fc:	1d3a      	adds	r2, r7, #4
 80005fe:	230a      	movs	r3, #10
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2302      	movs	r3, #2
 8000604:	2194      	movs	r1, #148	@ 0x94
 8000606:	4822      	ldr	r0, [pc, #136]	@ (8000690 <CS43L22_Init+0x19c>)
 8000608:	f001 fee8 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x27; TxBuffer[1] = 0x00;
 800060c:	2327      	movs	r3, #39	@ 0x27
 800060e:	713b      	strb	r3, [r7, #4]
 8000610:	2300      	movs	r3, #0
 8000612:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	230a      	movs	r3, #10
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2302      	movs	r3, #2
 800061c:	2194      	movs	r1, #148	@ 0x94
 800061e:	481c      	ldr	r0, [pc, #112]	@ (8000690 <CS43L22_Init+0x19c>)
 8000620:	f001 fedc 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1A; TxBuffer[1] = 0x0A;
 8000624:	231a      	movs	r3, #26
 8000626:	713b      	strb	r3, [r7, #4]
 8000628:	230a      	movs	r3, #10
 800062a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800062c:	1d3a      	adds	r2, r7, #4
 800062e:	230a      	movs	r3, #10
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2302      	movs	r3, #2
 8000634:	2194      	movs	r1, #148	@ 0x94
 8000636:	4816      	ldr	r0, [pc, #88]	@ (8000690 <CS43L22_Init+0x19c>)
 8000638:	f001 fed0 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1B; TxBuffer[1] = 0x0A;
 800063c:	231b      	movs	r3, #27
 800063e:	713b      	strb	r3, [r7, #4]
 8000640:	230a      	movs	r3, #10
 8000642:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000644:	1d3a      	adds	r2, r7, #4
 8000646:	230a      	movs	r3, #10
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2302      	movs	r3, #2
 800064c:	2194      	movs	r1, #148	@ 0x94
 800064e:	4810      	ldr	r0, [pc, #64]	@ (8000690 <CS43L22_Init+0x19c>)
 8000650:	f001 fec4 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1F; TxBuffer[1] = 0x0F;
 8000654:	231f      	movs	r3, #31
 8000656:	713b      	strb	r3, [r7, #4]
 8000658:	230f      	movs	r3, #15
 800065a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800065c:	1d3a      	adds	r2, r7, #4
 800065e:	230a      	movs	r3, #10
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2302      	movs	r3, #2
 8000664:	2194      	movs	r1, #148	@ 0x94
 8000666:	480a      	ldr	r0, [pc, #40]	@ (8000690 <CS43L22_Init+0x19c>)
 8000668:	f001 feb8 	bl	80023dc <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x02; TxBuffer[1] = 0x9E;
 800066c:	2302      	movs	r3, #2
 800066e:	713b      	strb	r3, [r7, #4]
 8000670:	239e      	movs	r3, #158	@ 0x9e
 8000672:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000674:	1d3a      	adds	r2, r7, #4
 8000676:	230a      	movs	r3, #10
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2302      	movs	r3, #2
 800067c:	2194      	movs	r1, #148	@ 0x94
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <CS43L22_Init+0x19c>)
 8000680:	f001 feac 	bl	80023dc <HAL_I2C_Master_Transmit>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020c00 	.word	0x40020c00
 8000690:	20000028 	.word	0x20000028

08000694 <CS43L22_Beep>:

void CS43L22_Beep(soundToneType pitch, uint32_t duration_ms)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af02      	add	r7, sp, #8
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuffer[2];

	// Set volume and off time
	TxBuffer[0] = 0x1D;
 80006a0:	231d      	movs	r3, #29
 80006a2:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0x00;
 80006a4:	2300      	movs	r3, #0
 80006a6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80006a8:	f107 020c 	add.w	r2, r7, #12
 80006ac:	230a      	movs	r3, #10
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2302      	movs	r3, #2
 80006b2:	2194      	movs	r1, #148	@ 0x94
 80006b4:	4819      	ldr	r0, [pc, #100]	@ (800071c <CS43L22_Beep+0x88>)
 80006b6:	f001 fe91 	bl	80023dc <HAL_I2C_Master_Transmit>

	// Set sound frequency
	TxBuffer[0] = 0x1C;
 80006ba:	231c      	movs	r3, #28
 80006bc:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = (pitch << 4);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	011b      	lsls	r3, r3, #4
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80006c6:	f107 020c 	add.w	r2, r7, #12
 80006ca:	230a      	movs	r3, #10
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2302      	movs	r3, #2
 80006d0:	2194      	movs	r1, #148	@ 0x94
 80006d2:	4812      	ldr	r0, [pc, #72]	@ (800071c <CS43L22_Beep+0x88>)
 80006d4:	f001 fe82 	bl	80023dc <HAL_I2C_Master_Transmit>

	// Enable continuous mode
	TxBuffer[0] = 0x1E;
 80006d8:	231e      	movs	r3, #30
 80006da:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0xC0;
 80006dc:	23c0      	movs	r3, #192	@ 0xc0
 80006de:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80006e0:	f107 020c 	add.w	r2, r7, #12
 80006e4:	230a      	movs	r3, #10
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2302      	movs	r3, #2
 80006ea:	2194      	movs	r1, #148	@ 0x94
 80006ec:	480b      	ldr	r0, [pc, #44]	@ (800071c <CS43L22_Beep+0x88>)
 80006ee:	f001 fe75 	bl	80023dc <HAL_I2C_Master_Transmit>

	// Playing...
	HAL_Delay(duration_ms);
 80006f2:	6838      	ldr	r0, [r7, #0]
 80006f4:	f000 fed2 	bl	800149c <HAL_Delay>

	// Disable continuous mode
	TxBuffer[0] = 0x1E;
 80006f8:	231e      	movs	r3, #30
 80006fa:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000700:	f107 020c 	add.w	r2, r7, #12
 8000704:	230a      	movs	r3, #10
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2302      	movs	r3, #2
 800070a:	2194      	movs	r1, #148	@ 0x94
 800070c:	4803      	ldr	r0, [pc, #12]	@ (800071c <CS43L22_Beep+0x88>)
 800070e:	f001 fe65 	bl	80023dc <HAL_I2C_Master_Transmit>
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000028 	.word	0x20000028

08000720 <rainbow_effect>:

void rainbow_effect(uint32_t speed)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	// Веселкові хвилі
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800072e:	4823      	ldr	r0, [pc, #140]	@ (80007bc <rainbow_effect+0x9c>)
 8000730:	f001 fcf6 	bl	8002120 <HAL_GPIO_WritePin>
	HAL_Delay(speed);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 feb1 	bl	800149c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000740:	481e      	ldr	r0, [pc, #120]	@ (80007bc <rainbow_effect+0x9c>)
 8000742:	f001 fced 	bl	8002120 <HAL_GPIO_WritePin>
	HAL_Delay(speed);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 fea8 	bl	800149c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000752:	481a      	ldr	r0, [pc, #104]	@ (80007bc <rainbow_effect+0x9c>)
 8000754:	f001 fce4 	bl	8002120 <HAL_GPIO_WritePin>
	HAL_Delay(speed);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 fe9f 	bl	800149c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000764:	4815      	ldr	r0, [pc, #84]	@ (80007bc <rainbow_effect+0x9c>)
 8000766:	f001 fcdb 	bl	8002120 <HAL_GPIO_WritePin>
	HAL_Delay(speed);
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 fe96 	bl	800149c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000776:	4811      	ldr	r0, [pc, #68]	@ (80007bc <rainbow_effect+0x9c>)
 8000778:	f001 fcd2 	bl	8002120 <HAL_GPIO_WritePin>
	HAL_Delay(speed);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 fe8d 	bl	800149c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000788:	480c      	ldr	r0, [pc, #48]	@ (80007bc <rainbow_effect+0x9c>)
 800078a:	f001 fcc9 	bl	8002120 <HAL_GPIO_WritePin>
	HAL_Delay(speed);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 fe84 	bl	800149c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800079a:	4808      	ldr	r0, [pc, #32]	@ (80007bc <rainbow_effect+0x9c>)
 800079c:	f001 fcc0 	bl	8002120 <HAL_GPIO_WritePin>
	HAL_Delay(speed);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 fe7b 	bl	800149c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ac:	4803      	ldr	r0, [pc, #12]	@ (80007bc <rainbow_effect+0x9c>)
 80007ae:	f001 fcb7 	bl	8002120 <HAL_GPIO_WritePin>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40020c00 	.word	0x40020c00

080007c0 <birthday_candles_effect>:

void birthday_candles_effect(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	// Імітація свічок на торті - м'яке мерехтіння
	for(int candle = 0; candle < 3; candle++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	e038      	b.n	800083e <birthday_candles_effect+0x7e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007d2:	481f      	ldr	r0, [pc, #124]	@ (8000850 <birthday_candles_effect+0x90>)
 80007d4:	f001 fca4 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(80);
 80007d8:	2050      	movs	r0, #80	@ 0x50
 80007da:	f000 fe5f 	bl	800149c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80007e4:	481a      	ldr	r0, [pc, #104]	@ (8000850 <birthday_candles_effect+0x90>)
 80007e6:	f001 fc9b 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(60);
 80007ea:	203c      	movs	r0, #60	@ 0x3c
 80007ec:	f000 fe56 	bl	800149c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80007f6:	4816      	ldr	r0, [pc, #88]	@ (8000850 <birthday_candles_effect+0x90>)
 80007f8:	f001 fc92 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(80);
 80007fc:	2050      	movs	r0, #80	@ 0x50
 80007fe:	f000 fe4d 	bl	800149c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000808:	4811      	ldr	r0, [pc, #68]	@ (8000850 <birthday_candles_effect+0x90>)
 800080a:	f001 fc89 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(60);
 800080e:	203c      	movs	r0, #60	@ 0x3c
 8000810:	f000 fe44 	bl	800149c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800081a:	480d      	ldr	r0, [pc, #52]	@ (8000850 <birthday_candles_effect+0x90>)
 800081c:	f001 fc80 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(80);
 8000820:	2050      	movs	r0, #80	@ 0x50
 8000822:	f000 fe3b 	bl	800149c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800082c:	4808      	ldr	r0, [pc, #32]	@ (8000850 <birthday_candles_effect+0x90>)
 800082e:	f001 fc77 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(120);
 8000832:	2078      	movs	r0, #120	@ 0x78
 8000834:	f000 fe32 	bl	800149c <HAL_Delay>
	for(int candle = 0; candle < 3; candle++)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b02      	cmp	r3, #2
 8000842:	ddc3      	ble.n	80007cc <birthday_candles_effect+0xc>
	}
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40020c00 	.word	0x40020c00

08000854 <sparkle_effect>:

void sparkle_effect(uint32_t duration)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	// Ефект блискавок/конфеті
	uint32_t start_time = HAL_GetTick();
 800085c:	f000 fe12 	bl	8001484 <HAL_GetTick>
 8000860:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick() - start_time < duration)
 8000862:	e03e      	b.n	80008e2 <sparkle_effect+0x8e>
	{
		// Випадкове блимання різних комбінацій
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800086a:	4824      	ldr	r0, [pc, #144]	@ (80008fc <sparkle_effect+0xa8>)
 800086c:	f001 fc58 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(30);
 8000870:	201e      	movs	r0, #30
 8000872:	f000 fe13 	bl	800149c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800087c:	481f      	ldr	r0, [pc, #124]	@ (80008fc <sparkle_effect+0xa8>)
 800087e:	f001 fc4f 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000888:	481c      	ldr	r0, [pc, #112]	@ (80008fc <sparkle_effect+0xa8>)
 800088a:	f001 fc49 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(40);
 800088e:	2028      	movs	r0, #40	@ 0x28
 8000890:	f000 fe04 	bl	800149c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800089a:	4818      	ldr	r0, [pc, #96]	@ (80008fc <sparkle_effect+0xa8>)
 800089c:	f001 fc40 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80008a6:	4815      	ldr	r0, [pc, #84]	@ (80008fc <sparkle_effect+0xa8>)
 80008a8:	f001 fc3a 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(35);
 80008ac:	2023      	movs	r0, #35	@ 0x23
 80008ae:	f000 fdf5 	bl	800149c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80008b8:	4810      	ldr	r0, [pc, #64]	@ (80008fc <sparkle_effect+0xa8>)
 80008ba:	f001 fc31 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80008c4:	480d      	ldr	r0, [pc, #52]	@ (80008fc <sparkle_effect+0xa8>)
 80008c6:	f001 fc2b 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(45);
 80008ca:	202d      	movs	r0, #45	@ 0x2d
 80008cc:	f000 fde6 	bl	800149c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80008d6:	4809      	ldr	r0, [pc, #36]	@ (80008fc <sparkle_effect+0xa8>)
 80008d8:	f001 fc22 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80008dc:	2032      	movs	r0, #50	@ 0x32
 80008de:	f000 fddd 	bl	800149c <HAL_Delay>
	while(HAL_GetTick() - start_time < duration)
 80008e2:	f000 fdcf 	bl	8001484 <HAL_GetTick>
 80008e6:	4602      	mov	r2, r0
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d8b8      	bhi.n	8000864 <sparkle_effect+0x10>
	}
}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40020c00 	.word	0x40020c00

08000900 <main>:

/* USER CODE END 0 */

int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_Init();
 8000904:	f000 fd58 	bl	80013b8 <HAL_Init>
	SystemClock_Config();
 8000908:	f000 fac2 	bl	8000e90 <SystemClock_Config>
	MX_GPIO_Init();
 800090c:	f000 fa5a 	bl	8000dc4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000910:	f000 fb88 	bl	8001024 <MX_DMA_Init>
	MX_I2C1_Init();
 8000914:	f000 fb2a 	bl	8000f6c <MX_I2C1_Init>
	MX_I2S3_Init();
 8000918:	f000 fb56 	bl	8000fc8 <MX_I2S3_Init>

	CS43L22_Init();
 800091c:	f7ff fdea 	bl	80004f4 <CS43L22_Init>
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, 100);
 8000920:	2264      	movs	r2, #100	@ 0x64
 8000922:	4913      	ldr	r1, [pc, #76]	@ (8000970 <main+0x70>)
 8000924:	4813      	ldr	r0, [pc, #76]	@ (8000974 <main+0x74>)
 8000926:	f002 f9f3 	bl	8002d10 <HAL_I2S_Transmit_DMA>

	while (1)
	{
		if(play_count >= max_plays)
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <main+0x78>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2202      	movs	r2, #2
 8000930:	4293      	cmp	r3, r2
 8000932:	d325      	bcc.n	8000980 <main+0x80>
		{
			// Після програвання - святковий фінал з конфеті
			sparkle_effect(2000);
 8000934:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000938:	f7ff ff8c 	bl	8000854 <sparkle_effect>
			HAL_Delay(500);
 800093c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000940:	f000 fdac 	bl	800149c <HAL_Delay>

			// Фінальний спалах
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800094a:	480c      	ldr	r0, [pc, #48]	@ (800097c <main+0x7c>)
 800094c:	f001 fbe8 	bl	8002120 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000950:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000954:	f000 fda2 	bl	800149c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800095e:	4807      	ldr	r0, [pc, #28]	@ (800097c <main+0x7c>)
 8000960:	f001 fbde 	bl	8002120 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8000964:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000968:	f000 fd98 	bl	800149c <HAL_Delay>
			continue;
 800096c:	e225      	b.n	8000dba <main+0x4ba>
 800096e:	bf00      	nop
 8000970:	20000124 	.word	0x20000124
 8000974:	2000007c 	.word	0x2000007c
 8000978:	200001ec 	.word	0x200001ec
 800097c:	40020c00 	.word	0x40020c00

		// Happy Birthday мелодія з красивими ефектами

		// "Happy Birthday to You" - перша фраза
		// C-C-D-C-F-E
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000986:	48e8      	ldr	r0, [pc, #928]	@ (8000d28 <main+0x428>)
 8000988:	f001 fbca 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(C5, eighth_note_duration);
 800098c:	2332      	movs	r3, #50	@ 0x32
 800098e:	4619      	mov	r1, r3
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff fe7f 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800099c:	48e2      	ldr	r0, [pc, #904]	@ (8000d28 <main+0x428>)
 800099e:	f001 fbbf 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration >> 2);
 80009a2:	2332      	movs	r3, #50	@ 0x32
 80009a4:	089b      	lsrs	r3, r3, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fd78 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b2:	48dd      	ldr	r0, [pc, #884]	@ (8000d28 <main+0x428>)
 80009b4:	f001 fbb4 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(C5, eighth_note_duration);
 80009b8:	2332      	movs	r3, #50	@ 0x32
 80009ba:	4619      	mov	r1, r3
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff fe69 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c8:	48d7      	ldr	r0, [pc, #860]	@ (8000d28 <main+0x428>)
 80009ca:	f001 fba9 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration >> 1);
 80009ce:	2332      	movs	r3, #50	@ 0x32
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fd62 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009de:	48d2      	ldr	r0, [pc, #840]	@ (8000d28 <main+0x428>)
 80009e0:	f001 fb9e 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(D5, quarter_note_duration);
 80009e4:	2364      	movs	r3, #100	@ 0x64
 80009e6:	4619      	mov	r1, r3
 80009e8:	2002      	movs	r0, #2
 80009ea:	f7ff fe53 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f4:	48cc      	ldr	r0, [pc, #816]	@ (8000d28 <main+0x428>)
 80009f6:	f001 fb93 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 80009fa:	2332      	movs	r3, #50	@ 0x32
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fd4d 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a08:	48c7      	ldr	r0, [pc, #796]	@ (8000d28 <main+0x428>)
 8000a0a:	f001 fb89 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(C5, quarter_note_duration);
 8000a0e:	2364      	movs	r3, #100	@ 0x64
 8000a10:	4619      	mov	r1, r3
 8000a12:	2001      	movs	r0, #1
 8000a14:	f7ff fe3e 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a1e:	48c2      	ldr	r0, [pc, #776]	@ (8000d28 <main+0x428>)
 8000a20:	f001 fb7e 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000a24:	2332      	movs	r3, #50	@ 0x32
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fd38 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000a32:	48bd      	ldr	r0, [pc, #756]	@ (8000d28 <main+0x428>)
 8000a34:	f001 fb74 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(F5, quarter_note_duration);
 8000a38:	2364      	movs	r3, #100	@ 0x64
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	2004      	movs	r0, #4
 8000a3e:	f7ff fe29 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000a48:	48b7      	ldr	r0, [pc, #732]	@ (8000d28 <main+0x428>)
 8000a4a:	f001 fb69 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000a4e:	2332      	movs	r3, #50	@ 0x32
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fd23 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a5c:	48b2      	ldr	r0, [pc, #712]	@ (8000d28 <main+0x428>)
 8000a5e:	f001 fb5f 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(E5, half_note_duration);
 8000a62:	23c8      	movs	r3, #200	@ 0xc8
 8000a64:	4619      	mov	r1, r3
 8000a66:	2003      	movs	r0, #3
 8000a68:	f7ff fe14 	bl	8000694 <CS43L22_Beep>
		birthday_candles_effect();
 8000a6c:	f7ff fea8 	bl	80007c0 <birthday_candles_effect>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a76:	48ac      	ldr	r0, [pc, #688]	@ (8000d28 <main+0x428>)
 8000a78:	f001 fb52 	bl	8002120 <HAL_GPIO_WritePin>

		// "Happy Birthday to You" - друга фраза
		// C-C-D-C-G-F
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a82:	48a9      	ldr	r0, [pc, #676]	@ (8000d28 <main+0x428>)
 8000a84:	f001 fb4c 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(C5, eighth_note_duration);
 8000a88:	2332      	movs	r3, #50	@ 0x32
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff fe01 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a98:	48a3      	ldr	r0, [pc, #652]	@ (8000d28 <main+0x428>)
 8000a9a:	f001 fb41 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration >> 2);
 8000a9e:	2332      	movs	r3, #50	@ 0x32
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fcfa 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aae:	489e      	ldr	r0, [pc, #632]	@ (8000d28 <main+0x428>)
 8000ab0:	f001 fb36 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(C5, eighth_note_duration);
 8000ab4:	2332      	movs	r3, #50	@ 0x32
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fdeb 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac4:	4898      	ldr	r0, [pc, #608]	@ (8000d28 <main+0x428>)
 8000ac6:	f001 fb2b 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration >> 1);
 8000aca:	2332      	movs	r3, #50	@ 0x32
 8000acc:	085b      	lsrs	r3, r3, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 fce4 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ada:	4893      	ldr	r0, [pc, #588]	@ (8000d28 <main+0x428>)
 8000adc:	f001 fb20 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(D5, quarter_note_duration);
 8000ae0:	2364      	movs	r3, #100	@ 0x64
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f7ff fdd5 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af0:	488d      	ldr	r0, [pc, #564]	@ (8000d28 <main+0x428>)
 8000af2:	f001 fb15 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000af6:	2332      	movs	r3, #50	@ 0x32
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fccf 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b04:	4888      	ldr	r0, [pc, #544]	@ (8000d28 <main+0x428>)
 8000b06:	f001 fb0b 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(C5, quarter_note_duration);
 8000b0a:	2364      	movs	r3, #100	@ 0x64
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f7ff fdc0 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b1a:	4883      	ldr	r0, [pc, #524]	@ (8000d28 <main+0x428>)
 8000b1c:	f001 fb00 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000b20:	2332      	movs	r3, #50	@ 0x32
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fcba 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b2e:	487e      	ldr	r0, [pc, #504]	@ (8000d28 <main+0x428>)
 8000b30:	f001 faf6 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(G5, quarter_note_duration);
 8000b34:	2364      	movs	r3, #100	@ 0x64
 8000b36:	4619      	mov	r1, r3
 8000b38:	2005      	movs	r0, #5
 8000b3a:	f7ff fdab 	bl	8000694 <CS43L22_Beep>
		rainbow_effect(50);
 8000b3e:	2032      	movs	r0, #50	@ 0x32
 8000b40:	f7ff fdee 	bl	8000720 <rainbow_effect>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b4a:	4877      	ldr	r0, [pc, #476]	@ (8000d28 <main+0x428>)
 8000b4c:	f001 fae8 	bl	8002120 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000b56:	4874      	ldr	r0, [pc, #464]	@ (8000d28 <main+0x428>)
 8000b58:	f001 fae2 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(F5, half_note_duration);
 8000b5c:	23c8      	movs	r3, #200	@ 0xc8
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2004      	movs	r0, #4
 8000b62:	f7ff fd97 	bl	8000694 <CS43L22_Beep>
		birthday_candles_effect();
 8000b66:	f7ff fe2b 	bl	80007c0 <birthday_candles_effect>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000b70:	486d      	ldr	r0, [pc, #436]	@ (8000d28 <main+0x428>)
 8000b72:	f001 fad5 	bl	8002120 <HAL_GPIO_WritePin>

		// "Happy Birthday dear [Name]"
		// C-C-C6-A-F-E-D
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b7c:	486a      	ldr	r0, [pc, #424]	@ (8000d28 <main+0x428>)
 8000b7e:	f001 facf 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(C5, eighth_note_duration);
 8000b82:	2332      	movs	r3, #50	@ 0x32
 8000b84:	4619      	mov	r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff fd84 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b92:	4865      	ldr	r0, [pc, #404]	@ (8000d28 <main+0x428>)
 8000b94:	f001 fac4 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration >> 2);
 8000b98:	2332      	movs	r3, #50	@ 0x32
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fc7d 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ba8:	485f      	ldr	r0, [pc, #380]	@ (8000d28 <main+0x428>)
 8000baa:	f001 fab9 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(C5, eighth_note_duration);
 8000bae:	2332      	movs	r3, #50	@ 0x32
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff fd6e 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bbe:	485a      	ldr	r0, [pc, #360]	@ (8000d28 <main+0x428>)
 8000bc0:	f001 faae 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration >> 1);
 8000bc4:	2332      	movs	r3, #50	@ 0x32
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fc67 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000bd4:	4854      	ldr	r0, [pc, #336]	@ (8000d28 <main+0x428>)
 8000bd6:	f001 faa3 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(C6, quarter_note_duration);
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2008      	movs	r0, #8
 8000be0:	f7ff fd58 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000bea:	484f      	ldr	r0, [pc, #316]	@ (8000d28 <main+0x428>)
 8000bec:	f001 fa98 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000bf0:	2332      	movs	r3, #50	@ 0x32
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fc52 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000bfe:	484a      	ldr	r0, [pc, #296]	@ (8000d28 <main+0x428>)
 8000c00:	f001 fa8e 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(A5, quarter_note_duration);
 8000c04:	2364      	movs	r3, #100	@ 0x64
 8000c06:	4619      	mov	r1, r3
 8000c08:	2006      	movs	r0, #6
 8000c0a:	f7ff fd43 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000c14:	4844      	ldr	r0, [pc, #272]	@ (8000d28 <main+0x428>)
 8000c16:	f001 fa83 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000c1a:	2332      	movs	r3, #50	@ 0x32
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fc3d 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000c28:	483f      	ldr	r0, [pc, #252]	@ (8000d28 <main+0x428>)
 8000c2a:	f001 fa79 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(F5, quarter_note_duration);
 8000c2e:	2364      	movs	r3, #100	@ 0x64
 8000c30:	4619      	mov	r1, r3
 8000c32:	2004      	movs	r0, #4
 8000c34:	f7ff fd2e 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000c3e:	483a      	ldr	r0, [pc, #232]	@ (8000d28 <main+0x428>)
 8000c40:	f001 fa6e 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000c44:	2332      	movs	r3, #50	@ 0x32
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fc28 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c52:	4835      	ldr	r0, [pc, #212]	@ (8000d28 <main+0x428>)
 8000c54:	f001 fa64 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(E5, quarter_note_duration);
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f7ff fd19 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c68:	482f      	ldr	r0, [pc, #188]	@ (8000d28 <main+0x428>)
 8000c6a:	f001 fa59 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000c6e:	2332      	movs	r3, #50	@ 0x32
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fc13 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c7c:	482a      	ldr	r0, [pc, #168]	@ (8000d28 <main+0x428>)
 8000c7e:	f001 fa4f 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(D5, half_note_duration);
 8000c82:	23c8      	movs	r3, #200	@ 0xc8
 8000c84:	4619      	mov	r1, r3
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff fd04 	bl	8000694 <CS43L22_Beep>
		rainbow_effect(80);
 8000c8c:	2050      	movs	r0, #80	@ 0x50
 8000c8e:	f7ff fd47 	bl	8000720 <rainbow_effect>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c98:	4823      	ldr	r0, [pc, #140]	@ (8000d28 <main+0x428>)
 8000c9a:	f001 fa41 	bl	8002120 <HAL_GPIO_WritePin>

		// "Happy Birthday to You" - фінальна фраза
		// Bb-Bb-A-F-G-F
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000ca4:	4820      	ldr	r0, [pc, #128]	@ (8000d28 <main+0x428>)
 8000ca6:	f001 fa3b 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(B5, eighth_note_duration);
 8000caa:	2332      	movs	r3, #50	@ 0x32
 8000cac:	4619      	mov	r1, r3
 8000cae:	2007      	movs	r0, #7
 8000cb0:	f7ff fcf0 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000cba:	481b      	ldr	r0, [pc, #108]	@ (8000d28 <main+0x428>)
 8000cbc:	f001 fa30 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration >> 2);
 8000cc0:	2332      	movs	r3, #50	@ 0x32
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fbe9 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000cd0:	4815      	ldr	r0, [pc, #84]	@ (8000d28 <main+0x428>)
 8000cd2:	f001 fa25 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(B5, eighth_note_duration);
 8000cd6:	2332      	movs	r3, #50	@ 0x32
 8000cd8:	4619      	mov	r1, r3
 8000cda:	2007      	movs	r0, #7
 8000cdc:	f7ff fcda 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000ce6:	4810      	ldr	r0, [pc, #64]	@ (8000d28 <main+0x428>)
 8000ce8:	f001 fa1a 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration >> 1);
 8000cec:	2332      	movs	r3, #50	@ 0x32
 8000cee:	085b      	lsrs	r3, r3, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fbd3 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000cfc:	480a      	ldr	r0, [pc, #40]	@ (8000d28 <main+0x428>)
 8000cfe:	f001 fa0f 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(A5, quarter_note_duration);
 8000d02:	2364      	movs	r3, #100	@ 0x64
 8000d04:	4619      	mov	r1, r3
 8000d06:	2006      	movs	r0, #6
 8000d08:	f7ff fcc4 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <main+0x428>)
 8000d14:	f001 fa04 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000d18:	2332      	movs	r3, #50	@ 0x32
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fbbe 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000d26:	e001      	b.n	8000d2c <main+0x42c>
 8000d28:	40020c00 	.word	0x40020c00
 8000d2c:	4823      	ldr	r0, [pc, #140]	@ (8000dbc <main+0x4bc>)
 8000d2e:	f001 f9f7 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(F5, quarter_note_duration);
 8000d32:	2364      	movs	r3, #100	@ 0x64
 8000d34:	4619      	mov	r1, r3
 8000d36:	2004      	movs	r0, #4
 8000d38:	f7ff fcac 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000d42:	481e      	ldr	r0, [pc, #120]	@ (8000dbc <main+0x4bc>)
 8000d44:	f001 f9ec 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000d48:	2332      	movs	r3, #50	@ 0x32
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fba6 	bl	800149c <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d56:	4819      	ldr	r0, [pc, #100]	@ (8000dbc <main+0x4bc>)
 8000d58:	f001 f9e2 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(G5, quarter_note_duration);
 8000d5c:	2364      	movs	r3, #100	@ 0x64
 8000d5e:	4619      	mov	r1, r3
 8000d60:	2005      	movs	r0, #5
 8000d62:	f7ff fc97 	bl	8000694 <CS43L22_Beep>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d6c:	4813      	ldr	r0, [pc, #76]	@ (8000dbc <main+0x4bc>)
 8000d6e:	f001 f9d7 	bl	8002120 <HAL_GPIO_WritePin>
		HAL_Delay(eighth_note_duration);
 8000d72:	2332      	movs	r3, #50	@ 0x32
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fb91 	bl	800149c <HAL_Delay>

		// Фінальна нота з великим ефектом
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d80:	480e      	ldr	r0, [pc, #56]	@ (8000dbc <main+0x4bc>)
 8000d82:	f001 f9cd 	bl	8002120 <HAL_GPIO_WritePin>
		CS43L22_Beep(F5, full_note_duration);
 8000d86:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	2004      	movs	r0, #4
 8000d8e:	f7ff fc81 	bl	8000694 <CS43L22_Beep>
		sparkle_effect(800);
 8000d92:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000d96:	f7ff fd5d 	bl	8000854 <sparkle_effect>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000da0:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <main+0x4bc>)
 8000da2:	f001 f9bd 	bl	8002120 <HAL_GPIO_WritePin>

		play_count++;
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <main+0x4c0>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <main+0x4c0>)
 8000db0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1500);
 8000db2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000db6:	f000 fb71 	bl	800149c <HAL_Delay>
		if(play_count >= max_plays)
 8000dba:	e5b6      	b.n	800092a <main+0x2a>
 8000dbc:	40020c00 	.word	0x40020c00
 8000dc0:	200001ec 	.word	0x200001ec

08000dc4 <MX_GPIO_Init>:
	}
}

static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b2a      	ldr	r3, [pc, #168]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a29      	ldr	r2, [pc, #164]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a22      	ldr	r2, [pc, #136]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_GPIO_Init+0xc4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <MX_GPIO_Init+0xc8>)
 8000e50:	f001 f966 	bl	8002120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000e5a:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <MX_GPIO_Init+0xc8>)
 8000e5c:	f001 f960 	bl	8002120 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PD4, PD12, PD13, PD14, PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e60:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000e64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_GPIO_Init+0xc8>)
 8000e7a:	f000 ffb5 	bl	8001de8 <HAL_GPIO_Init>
}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020c00 	.word	0x40020c00

08000e90 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b094      	sub	sp, #80	@ 0x50
 8000e94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 0320 	add.w	r3, r7, #32
 8000e9a:	2230      	movs	r2, #48	@ 0x30
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 f91e 	bl	80040e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PLL_PLLM_CONFIG(16);
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <SystemClock_Config+0xd4>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ebc:	4a29      	ldr	r2, [pc, #164]	@ (8000f64 <SystemClock_Config+0xd4>)
 8000ebe:	f043 0310 	orr.w	r3, r3, #16
 8000ec2:	6053      	str	r3, [r2, #4]
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000ec4:	4b27      	ldr	r3, [pc, #156]	@ (8000f64 <SystemClock_Config+0xd4>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	4a26      	ldr	r2, [pc, #152]	@ (8000f64 <SystemClock_Config+0xd4>)
 8000eca:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000ece:	6053      	str	r3, [r2, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	4b23      	ldr	r3, [pc, #140]	@ (8000f64 <SystemClock_Config+0xd4>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	4a22      	ldr	r2, [pc, #136]	@ (8000f64 <SystemClock_Config+0xd4>)
 8000eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <SystemClock_Config+0xd4>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <SystemClock_Config+0xd8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <SystemClock_Config+0xd8>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <SystemClock_Config+0xd8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f10:	2310      	movs	r3, #16
 8000f12:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1c:	f107 0320 	add.w	r3, r7, #32
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fb57 	bl	80035d4 <HAL_RCC_OscConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 8000f2c:	f000 f89a 	bl	8001064 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000f30:	230f      	movs	r3, #15
 8000f32:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fdba 	bl	8003ac4 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000f56:	f000 f885 	bl	8001064 <Error_Handler>
	}
}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	@ 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f72:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <MX_I2C1_Init+0x54>)
 8000f74:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f78:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <MX_I2C1_Init+0x58>)
 8000f7a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f8e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000faa:	f001 f8d3 	bl	8002154 <HAL_I2C_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000fb4:	f000 f856 	bl	8001064 <Error_Handler>
	}
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000028 	.word	0x20000028
 8000fc0:	40005400 	.word	0x40005400
 8000fc4:	000186a0 	.word	0x000186a0

08000fc8 <MX_I2S3_Init>:

static void MX_I2S3_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	hi2s3.Instance = SPI3;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <MX_I2S3_Init+0x54>)
 8000fce:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <MX_I2S3_Init+0x58>)
 8000fd0:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <MX_I2S3_Init+0x54>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd8:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <MX_I2S3_Init+0x54>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_I2S3_Init+0x54>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <MX_I2S3_Init+0x54>)
 8000fe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fec:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <MX_I2S3_Init+0x54>)
 8000ff0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000ff4:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_I2S3_Init+0x54>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <MX_I2S3_Init+0x54>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_I2S3_Init+0x54>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	@ (800101c <MX_I2S3_Init+0x54>)
 800100a:	f001 fd41 	bl	8002a90 <HAL_I2S_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_I2S3_Init+0x50>
	{
		Error_Handler();
 8001014:	f000 f826 	bl	8001064 <Error_Handler>
	}
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000007c 	.word	0x2000007c
 8001020:	40003c00 	.word	0x40003c00

08001024 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <MX_DMA_Init+0x3c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a0b      	ldr	r2, [pc, #44]	@ (8001060 <MX_DMA_Init+0x3c>)
 8001034:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_DMA_Init+0x3c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2010      	movs	r0, #16
 800104c:	f000 fb25 	bl	800169a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001050:	2010      	movs	r0, #16
 8001052:	f000 fb3e 	bl	80016d2 <HAL_NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <Error_Handler>:

void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
	__disable_irq();
	while (1) {}
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <Error_Handler+0x8>

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <HAL_MspInit+0x4c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001084:	6453      	str	r3, [r2, #68]	@ 0x44
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	4a08      	ldr	r2, [pc, #32]	@ (80010bc <HAL_MspInit+0x4c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a19      	ldr	r2, [pc, #100]	@ (8001144 <HAL_I2C_MspInit+0x84>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d12c      	bne.n	800113c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <HAL_I2C_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a17      	ldr	r2, [pc, #92]	@ (8001148 <HAL_I2C_MspInit+0x88>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <HAL_I2C_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80010fe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001104:	2312      	movs	r3, #18
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001110:	2304      	movs	r3, #4
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	480c      	ldr	r0, [pc, #48]	@ (800114c <HAL_I2C_MspInit+0x8c>)
 800111c:	f000 fe64 	bl	8001de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <HAL_I2C_MspInit+0x88>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001128:	4a07      	ldr	r2, [pc, #28]	@ (8001148 <HAL_I2C_MspInit+0x88>)
 800112a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800112e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <HAL_I2C_MspInit+0x88>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	@ 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40005400 	.word	0x40005400
 8001148:	40023800 	.word	0x40023800
 800114c:	40020400 	.word	0x40020400

08001150 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	@ 0x38
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a4e      	ldr	r2, [pc, #312]	@ (80012b4 <HAL_I2S_MspInit+0x164>)
 800117c:	4293      	cmp	r3, r2
 800117e:	f040 8094 	bne.w	80012aa <HAL_I2S_MspInit+0x15a>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001186:	23c0      	movs	r3, #192	@ 0xc0
 8001188:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fe62 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800119e:	f7ff ff61 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <HAL_I2S_MspInit+0x168>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	4a43      	ldr	r2, [pc, #268]	@ (80012b8 <HAL_I2S_MspInit+0x168>)
 80011ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b2:	4b41      	ldr	r3, [pc, #260]	@ (80012b8 <HAL_I2S_MspInit+0x168>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b3d      	ldr	r3, [pc, #244]	@ (80012b8 <HAL_I2S_MspInit+0x168>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a3c      	ldr	r2, [pc, #240]	@ (80012b8 <HAL_I2S_MspInit+0x168>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b3a      	ldr	r3, [pc, #232]	@ (80012b8 <HAL_I2S_MspInit+0x168>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b36      	ldr	r3, [pc, #216]	@ (80012b8 <HAL_I2S_MspInit+0x168>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a35      	ldr	r2, [pc, #212]	@ (80012b8 <HAL_I2S_MspInit+0x168>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b33      	ldr	r3, [pc, #204]	@ (80012b8 <HAL_I2S_MspInit+0x168>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011f6:	2310      	movs	r3, #16
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001206:	2306      	movs	r3, #6
 8001208:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	482a      	ldr	r0, [pc, #168]	@ (80012bc <HAL_I2S_MspInit+0x16c>)
 8001212:	f000 fde9 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001216:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001228:	2306      	movs	r3, #6
 800122a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	4823      	ldr	r0, [pc, #140]	@ (80012c0 <HAL_I2S_MspInit+0x170>)
 8001234:	f000 fdd8 	bl	8001de8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001238:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 800123a:	4a23      	ldr	r2, [pc, #140]	@ (80012c8 <HAL_I2S_MspInit+0x178>)
 800123c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 8001246:	2240      	movs	r2, #64	@ 0x40
 8001248:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124a:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 8001252:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001256:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 800125a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800125e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 8001262:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001266:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 800126a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800126e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 8001278:	2204      	movs	r2, #4
 800127a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 800127e:	2203      	movs	r2, #3
 8001280:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 8001284:	2200      	movs	r2, #0
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001288:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 800128a:	2200      	movs	r2, #0
 800128c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800128e:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 8001290:	f000 fa3a 	bl	8001708 <HAL_DMA_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 800129a:	f7ff fee3 	bl	8001064 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 80012a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80012a4:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <HAL_I2S_MspInit+0x174>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80012aa:	bf00      	nop
 80012ac:	3738      	adds	r7, #56	@ 0x38
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40003c00 	.word	0x40003c00
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020800 	.word	0x40020800
 80012c4:	200000c4 	.word	0x200000c4
 80012c8:	40026088 	.word	0x40026088

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <NMI_Handler+0x4>

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <MemManage_Handler+0x4>

080012e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001322:	f000 f89b 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <DMA1_Stream5_IRQHandler+0x10>)
 8001332:	f000 faef 	bl	8001914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200000c4 	.word	0x200000c4

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800139c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001368:	f7ff ffea 	bl	8001340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	@ (80013a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	@ (80013a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	@ (80013b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001392:	f002 fead 	bl	80040f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff fab3 	bl	8000900 <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013a8:	08004180 	.word	0x08004180
  ldr r2, =_sbss
 80013ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013b0:	200001f4 	.word	0x200001f4

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	@ (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f94f 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	200f      	movs	r0, #15
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fe40 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f967 	bl	80016ee <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f92f 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	@ (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	20000008 	.word	0x20000008
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	200001f0 	.word	0x200001f0

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200001f0 	.word	0x200001f0

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	@ (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	@ (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff feb6 	bl	8001484 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e099      	b.n	8001858 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001744:	e00f      	b.n	8001766 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001746:	f7ff fe9d 	bl	8001484 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b05      	cmp	r3, #5
 8001752:	d908      	bls.n	8001766 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2220      	movs	r2, #32
 8001758:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e078      	b.n	8001858 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e8      	bne.n	8001746 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <HAL_DMA_Init+0x158>)
 8001780:	4013      	ands	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001792:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d107      	bne.n	80017d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c8:	4313      	orrs	r3, r2
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f023 0307 	bic.w	r3, r3, #7
 80017e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d117      	bne.n	800182a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4313      	orrs	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00e      	beq.n	800182a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fa6f 	bl	8001cf0 <DMA_CheckFifoParam>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2240      	movs	r2, #64	@ 0x40
 800181c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001826:	2301      	movs	r3, #1
 8001828:	e016      	b.n	8001858 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fa26 	bl	8001c84 <DMA_CalcBaseAndBitshift>
 8001838:	4603      	mov	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001840:	223f      	movs	r2, #63	@ 0x3f
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	f010803f 	.word	0xf010803f

08001864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_DMA_Start_IT+0x26>
 8001886:	2302      	movs	r3, #2
 8001888:	e040      	b.n	800190c <HAL_DMA_Start_IT+0xa8>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d12f      	bne.n	80018fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2202      	movs	r2, #2
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f9b8 	bl	8001c28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018bc:	223f      	movs	r2, #63	@ 0x3f
 80018be:	409a      	lsls	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0216 	orr.w	r2, r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0208 	orr.w	r2, r2, #8
 80018ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e005      	b.n	800190a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001906:	2302      	movs	r3, #2
 8001908:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800190a:	7dfb      	ldrb	r3, [r7, #23]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001920:	4b8e      	ldr	r3, [pc, #568]	@ (8001b5c <HAL_DMA_IRQHandler+0x248>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a8e      	ldr	r2, [pc, #568]	@ (8001b60 <HAL_DMA_IRQHandler+0x24c>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	0a9b      	lsrs	r3, r3, #10
 800192c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193e:	2208      	movs	r2, #8
 8001940:	409a      	lsls	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d01a      	beq.n	8001980 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0204 	bic.w	r2, r2, #4
 8001966:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196c:	2208      	movs	r2, #8
 800196e:	409a      	lsls	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001978:	f043 0201 	orr.w	r2, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001984:	2201      	movs	r2, #1
 8001986:	409a      	lsls	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d012      	beq.n	80019b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a2:	2201      	movs	r2, #1
 80019a4:	409a      	lsls	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ae:	f043 0202 	orr.w	r2, r3, #2
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ba:	2204      	movs	r2, #4
 80019bc:	409a      	lsls	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00b      	beq.n	80019ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d8:	2204      	movs	r2, #4
 80019da:	409a      	lsls	r2, r3
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e4:	f043 0204 	orr.w	r2, r3, #4
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f0:	2210      	movs	r2, #16
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d043      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d03c      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0e:	2210      	movs	r2, #16
 8001a10:	409a      	lsls	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d018      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d024      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	4798      	blx	r3
 8001a42:	e01f      	b.n	8001a84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01b      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
 8001a54:	e016      	b.n	8001a84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d107      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0208 	bic.w	r2, r2, #8
 8001a72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a88:	2220      	movs	r2, #32
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 808f 	beq.w	8001bb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 8087 	beq.w	8001bb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aaa:	2220      	movs	r2, #32
 8001aac:	409a      	lsls	r2, r3
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d136      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0216 	bic.w	r2, r2, #22
 8001acc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001adc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d103      	bne.n	8001aee <HAL_DMA_IRQHandler+0x1da>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0208 	bic.w	r2, r2, #8
 8001afc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b02:	223f      	movs	r2, #63	@ 0x3f
 8001b04:	409a      	lsls	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d07e      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
        }
        return;
 8001b2a:	e079      	b.n	8001c20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d01d      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10d      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d031      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	4798      	blx	r3
 8001b58:	e02c      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x2a0>
 8001b5a:	bf00      	nop
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d023      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
 8001b74:	e01e      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10f      	bne.n	8001ba4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0210 	bic.w	r2, r2, #16
 8001b92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d032      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d022      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2205      	movs	r2, #5
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3301      	adds	r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d307      	bcc.n	8001bfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f2      	bne.n	8001be0 <HAL_DMA_IRQHandler+0x2cc>
 8001bfa:	e000      	b.n	8001bfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	4798      	blx	r3
 8001c1e:	e000      	b.n	8001c22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c20:	bf00      	nop
    }
  }
}
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b40      	cmp	r3, #64	@ 0x40
 8001c54:	d108      	bne.n	8001c68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c66:	e007      	b.n	8001c78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	3b10      	subs	r3, #16
 8001c94:	4a14      	ldr	r2, [pc, #80]	@ (8001ce8 <DMA_CalcBaseAndBitshift+0x64>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c9e:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <DMA_CalcBaseAndBitshift+0x68>)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d909      	bls.n	8001cc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cba:	f023 0303 	bic.w	r3, r3, #3
 8001cbe:	1d1a      	adds	r2, r3, #4
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cc4:	e007      	b.n	8001cd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	aaaaaaab 	.word	0xaaaaaaab
 8001cec:	08004168 	.word	0x08004168

08001cf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11f      	bne.n	8001d4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d856      	bhi.n	8001dbe <DMA_CheckFifoParam+0xce>
 8001d10:	a201      	add	r2, pc, #4	@ (adr r2, 8001d18 <DMA_CheckFifoParam+0x28>)
 8001d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d16:	bf00      	nop
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001d3b 	.word	0x08001d3b
 8001d20:	08001d29 	.word	0x08001d29
 8001d24:	08001dbf 	.word	0x08001dbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d046      	beq.n	8001dc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d38:	e043      	b.n	8001dc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d42:	d140      	bne.n	8001dc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d48:	e03d      	b.n	8001dc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d52:	d121      	bne.n	8001d98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d837      	bhi.n	8001dca <DMA_CheckFifoParam+0xda>
 8001d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d60 <DMA_CheckFifoParam+0x70>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d71 	.word	0x08001d71
 8001d64:	08001d77 	.word	0x08001d77
 8001d68:	08001d71 	.word	0x08001d71
 8001d6c:	08001d89 	.word	0x08001d89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
      break;
 8001d74:	e030      	b.n	8001dd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d025      	beq.n	8001dce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d86:	e022      	b.n	8001dce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d90:	d11f      	bne.n	8001dd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d96:	e01c      	b.n	8001dd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d903      	bls.n	8001da6 <DMA_CheckFifoParam+0xb6>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d003      	beq.n	8001dac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001da4:	e018      	b.n	8001dd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
      break;
 8001daa:	e015      	b.n	8001dd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00e      	beq.n	8001dd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
      break;
 8001dbc:	e00b      	b.n	8001dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001dbe:	bf00      	nop
 8001dc0:	e00a      	b.n	8001dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc2:	bf00      	nop
 8001dc4:	e008      	b.n	8001dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc6:	bf00      	nop
 8001dc8:	e006      	b.n	8001dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dca:	bf00      	nop
 8001dcc:	e004      	b.n	8001dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dce:	bf00      	nop
 8001dd0:	e002      	b.n	8001dd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dd2:	bf00      	nop
 8001dd4:	e000      	b.n	8001dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd6:	bf00      	nop
    }
  } 
  
  return status; 
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	@ 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e16b      	b.n	80020dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 815a 	bne.w	80020d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d005      	beq.n	8001e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d130      	bne.n	8001e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d017      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d123      	bne.n	8001f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	08da      	lsrs	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3208      	adds	r2, #8
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80b4 	beq.w	80020d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b60      	ldr	r3, [pc, #384]	@ (80020f4 <HAL_GPIO_Init+0x30c>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	4a5f      	ldr	r2, [pc, #380]	@ (80020f4 <HAL_GPIO_Init+0x30c>)
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80020f4 <HAL_GPIO_Init+0x30c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80020f8 <HAL_GPIO_Init+0x310>)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a52      	ldr	r2, [pc, #328]	@ (80020fc <HAL_GPIO_Init+0x314>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02b      	beq.n	800200e <HAL_GPIO_Init+0x226>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a51      	ldr	r2, [pc, #324]	@ (8002100 <HAL_GPIO_Init+0x318>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d025      	beq.n	800200a <HAL_GPIO_Init+0x222>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a50      	ldr	r2, [pc, #320]	@ (8002104 <HAL_GPIO_Init+0x31c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <HAL_GPIO_Init+0x21e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4f      	ldr	r2, [pc, #316]	@ (8002108 <HAL_GPIO_Init+0x320>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0x21a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4e      	ldr	r2, [pc, #312]	@ (800210c <HAL_GPIO_Init+0x324>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x216>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8002110 <HAL_GPIO_Init+0x328>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x212>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	@ (8002114 <HAL_GPIO_Init+0x32c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x20e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	@ (8002118 <HAL_GPIO_Init+0x330>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x20a>
 8001fee:	2307      	movs	r3, #7
 8001ff0:	e00e      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	e00c      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ff6:	2306      	movs	r3, #6
 8001ff8:	e00a      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	e008      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ffe:	2304      	movs	r3, #4
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8002002:	2303      	movs	r3, #3
 8002004:	e004      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8002006:	2302      	movs	r3, #2
 8002008:	e002      	b.n	8002010 <HAL_GPIO_Init+0x228>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x228>
 800200e:	2300      	movs	r3, #0
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	f002 0203 	and.w	r2, r2, #3
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4093      	lsls	r3, r2
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002020:	4935      	ldr	r1, [pc, #212]	@ (80020f8 <HAL_GPIO_Init+0x310>)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202e:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <HAL_GPIO_Init+0x334>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002052:	4a32      	ldr	r2, [pc, #200]	@ (800211c <HAL_GPIO_Init+0x334>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002058:	4b30      	ldr	r3, [pc, #192]	@ (800211c <HAL_GPIO_Init+0x334>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800207c:	4a27      	ldr	r2, [pc, #156]	@ (800211c <HAL_GPIO_Init+0x334>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002082:	4b26      	ldr	r3, [pc, #152]	@ (800211c <HAL_GPIO_Init+0x334>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a6:	4a1d      	ldr	r2, [pc, #116]	@ (800211c <HAL_GPIO_Init+0x334>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	@ (800211c <HAL_GPIO_Init+0x334>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d0:	4a12      	ldr	r2, [pc, #72]	@ (800211c <HAL_GPIO_Init+0x334>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3301      	adds	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b0f      	cmp	r3, #15
 80020e0:	f67f ae90 	bls.w	8001e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3724      	adds	r7, #36	@ 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800
 8002108:	40020c00 	.word	0x40020c00
 800210c:	40021000 	.word	0x40021000
 8002110:	40021400 	.word	0x40021400
 8002114:	40021800 	.word	0x40021800
 8002118:	40021c00 	.word	0x40021c00
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800213c:	e003      	b.n	8002146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e12b      	b.n	80023be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe ffa0 	bl	80010c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	@ 0x24
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021b8:	f001 fe3c 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 80021bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a81      	ldr	r2, [pc, #516]	@ (80023c8 <HAL_I2C_Init+0x274>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d807      	bhi.n	80021d8 <HAL_I2C_Init+0x84>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a80      	ldr	r2, [pc, #512]	@ (80023cc <HAL_I2C_Init+0x278>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	bf94      	ite	ls
 80021d0:	2301      	movls	r3, #1
 80021d2:	2300      	movhi	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	e006      	b.n	80021e6 <HAL_I2C_Init+0x92>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a7d      	ldr	r2, [pc, #500]	@ (80023d0 <HAL_I2C_Init+0x27c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	bf94      	ite	ls
 80021e0:	2301      	movls	r3, #1
 80021e2:	2300      	movhi	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0e7      	b.n	80023be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4a78      	ldr	r2, [pc, #480]	@ (80023d4 <HAL_I2C_Init+0x280>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9b      	lsrs	r3, r3, #18
 80021f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	430a      	orrs	r2, r1
 800220c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a6a      	ldr	r2, [pc, #424]	@ (80023c8 <HAL_I2C_Init+0x274>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d802      	bhi.n	8002228 <HAL_I2C_Init+0xd4>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3301      	adds	r3, #1
 8002226:	e009      	b.n	800223c <HAL_I2C_Init+0xe8>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	4a69      	ldr	r2, [pc, #420]	@ (80023d8 <HAL_I2C_Init+0x284>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	3301      	adds	r3, #1
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	430b      	orrs	r3, r1
 8002242:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800224e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	495c      	ldr	r1, [pc, #368]	@ (80023c8 <HAL_I2C_Init+0x274>)
 8002258:	428b      	cmp	r3, r1
 800225a:	d819      	bhi.n	8002290 <HAL_I2C_Init+0x13c>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1e59      	subs	r1, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fbb1 f3f3 	udiv	r3, r1, r3
 800226a:	1c59      	adds	r1, r3, #1
 800226c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002270:	400b      	ands	r3, r1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_I2C_Init+0x138>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e59      	subs	r1, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fbb1 f3f3 	udiv	r3, r1, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228a:	e051      	b.n	8002330 <HAL_I2C_Init+0x1dc>
 800228c:	2304      	movs	r3, #4
 800228e:	e04f      	b.n	8002330 <HAL_I2C_Init+0x1dc>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d111      	bne.n	80022bc <HAL_I2C_Init+0x168>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1e58      	subs	r0, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	e012      	b.n	80022e2 <HAL_I2C_Init+0x18e>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e58      	subs	r0, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	0099      	lsls	r1, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Init+0x196>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e022      	b.n	8002330 <HAL_I2C_Init+0x1dc>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10e      	bne.n	8002310 <HAL_I2C_Init+0x1bc>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1e58      	subs	r0, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6859      	ldr	r1, [r3, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	440b      	add	r3, r1
 8002300:	fbb0 f3f3 	udiv	r3, r0, r3
 8002304:	3301      	adds	r3, #1
 8002306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800230e:	e00f      	b.n	8002330 <HAL_I2C_Init+0x1dc>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1e58      	subs	r0, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	0099      	lsls	r1, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	fbb0 f3f3 	udiv	r3, r0, r3
 8002326:	3301      	adds	r3, #1
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	6809      	ldr	r1, [r1, #0]
 8002334:	4313      	orrs	r3, r2
 8002336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800235e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6911      	ldr	r1, [r2, #16]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68d2      	ldr	r2, [r2, #12]
 800236a:	4311      	orrs	r1, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	430b      	orrs	r3, r1
 8002372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	000186a0 	.word	0x000186a0
 80023cc:	001e847f 	.word	0x001e847f
 80023d0:	003d08ff 	.word	0x003d08ff
 80023d4:	431bde83 	.word	0x431bde83
 80023d8:	10624dd3 	.word	0x10624dd3

080023dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	461a      	mov	r2, r3
 80023e8:	460b      	mov	r3, r1
 80023ea:	817b      	strh	r3, [r7, #10]
 80023ec:	4613      	mov	r3, r2
 80023ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff f848 	bl	8001484 <HAL_GetTick>
 80023f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b20      	cmp	r3, #32
 8002400:	f040 80e0 	bne.w	80025c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2319      	movs	r3, #25
 800240a:	2201      	movs	r2, #1
 800240c:	4970      	ldr	r1, [pc, #448]	@ (80025d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f964 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800241a:	2302      	movs	r3, #2
 800241c:	e0d3      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_I2C_Master_Transmit+0x50>
 8002428:	2302      	movs	r3, #2
 800242a:	e0cc      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d007      	beq.n	8002452 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002460:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2221      	movs	r2, #33	@ 0x21
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2210      	movs	r2, #16
 800246e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	893a      	ldrh	r2, [r7, #8]
 8002482:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4a50      	ldr	r2, [pc, #320]	@ (80025d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002492:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002494:	8979      	ldrh	r1, [r7, #10]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	6a3a      	ldr	r2, [r7, #32]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f89c 	bl	80025d8 <I2C_MasterRequestWrite>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e08d      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024c0:	e066      	b.n	8002590 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	6a39      	ldr	r1, [r7, #32]
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 fa22 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00d      	beq.n	80024ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d107      	bne.n	80024ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e06b      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b04      	cmp	r3, #4
 800252a:	d11b      	bne.n	8002564 <HAL_I2C_Master_Transmit+0x188>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002530:	2b00      	cmp	r3, #0
 8002532:	d017      	beq.n	8002564 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	6a39      	ldr	r1, [r7, #32]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fa19 	bl	80029a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	2b04      	cmp	r3, #4
 800257a:	d107      	bne.n	800258c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800258a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e01a      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	d194      	bne.n	80024c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e000      	b.n	80025c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
  }
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	00100002 	.word	0x00100002
 80025d4:	ffff0000 	.word	0xffff0000

080025d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	460b      	mov	r3, r1
 80025e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d006      	beq.n	8002602 <I2C_MasterRequestWrite+0x2a>
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d003      	beq.n	8002602 <I2C_MasterRequestWrite+0x2a>
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002600:	d108      	bne.n	8002614 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e00b      	b.n	800262c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	2b12      	cmp	r3, #18
 800261a:	d107      	bne.n	800262c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800262a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f84f 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002652:	d103      	bne.n	800265c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e035      	b.n	80026cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002668:	d108      	bne.n	800267c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800266a:	897b      	ldrh	r3, [r7, #10]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	e01b      	b.n	80026b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800267c:	897b      	ldrh	r3, [r7, #10]
 800267e:	11db      	asrs	r3, r3, #7
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 0306 	and.w	r3, r3, #6
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f063 030f 	orn	r3, r3, #15
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	490e      	ldr	r1, [pc, #56]	@ (80026d4 <I2C_MasterRequestWrite+0xfc>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f898 	bl	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e010      	b.n	80026cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026aa:	897b      	ldrh	r3, [r7, #10]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4907      	ldr	r1, [pc, #28]	@ (80026d8 <I2C_MasterRequestWrite+0x100>)
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f888 	bl	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	00010008 	.word	0x00010008
 80026d8:	00010002 	.word	0x00010002

080026dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ec:	e048      	b.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d044      	beq.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7fe fec5 	bl	8001484 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d139      	bne.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	0c1b      	lsrs	r3, r3, #16
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d10d      	bne.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	43da      	mvns	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4013      	ands	r3, r2
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	e00c      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	43da      	mvns	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4013      	ands	r3, r2
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	429a      	cmp	r2, r3
 8002750:	d116      	bne.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e023      	b.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10d      	bne.n	80027a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	43da      	mvns	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	e00c      	b.n	80027c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	43da      	mvns	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4013      	ands	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d093      	beq.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027de:	e071      	b.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ee:	d123      	bne.n	8002838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f043 0204 	orr.w	r2, r3, #4
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e067      	b.n	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283e:	d041      	beq.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002840:	f7fe fe20 	bl	8001484 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	d302      	bcc.n	8002856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d136      	bne.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	0c1b      	lsrs	r3, r3, #16
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10c      	bne.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4013      	ands	r3, r2
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf14      	ite	ne
 8002872:	2301      	movne	r3, #1
 8002874:	2300      	moveq	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	e00b      	b.n	8002892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	43da      	mvns	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4013      	ands	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e021      	b.n	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10c      	bne.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	e00b      	b.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4013      	ands	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	f47f af6d 	bne.w	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800291c:	e034      	b.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f886 	bl	8002a30 <I2C_IsAcknowledgeFailed>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e034      	b.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d028      	beq.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002936:	f7fe fda5 	bl	8001484 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	429a      	cmp	r2, r3
 8002944:	d302      	bcc.n	800294c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11d      	bne.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002956:	2b80      	cmp	r3, #128	@ 0x80
 8002958:	d016      	beq.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e007      	b.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b80      	cmp	r3, #128	@ 0x80
 8002994:	d1c3      	bne.n	800291e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ac:	e034      	b.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f83e 	bl	8002a30 <I2C_IsAcknowledgeFailed>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e034      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d028      	beq.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7fe fd5d 	bl	8001484 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d11d      	bne.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d016      	beq.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e007      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d1c3      	bne.n	80029ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a46:	d11b      	bne.n	8002a80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e128      	b.n	8002cf4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a90      	ldr	r2, [pc, #576]	@ (8002cfc <HAL_I2S_Init+0x26c>)
 8002aba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7fe fb47 	bl	8001150 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002ad8:	f023 030f 	bic.w	r3, r3, #15
 8002adc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d060      	beq.n	8002bb0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002af6:	2310      	movs	r3, #16
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e001      	b.n	8002b00 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002afc:	2320      	movs	r3, #32
 8002afe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d802      	bhi.n	8002b0e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f001 fa86 	bl	8004020 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b14:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b1e:	d125      	bne.n	8002b6c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d010      	beq.n	8002b4a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	3305      	adds	r3, #5
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e01f      	b.n	8002b8a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	3305      	adds	r3, #5
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	e00e      	b.n	8002b8a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	3305      	adds	r3, #5
 8002b88:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4a5c      	ldr	r2, [pc, #368]	@ (8002d00 <HAL_I2S_Init+0x270>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	08db      	lsrs	r3, r3, #3
 8002b94:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e003      	b.n	8002bb8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d902      	bls.n	8002bc4 <HAL_I2S_Init+0x134>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2bff      	cmp	r3, #255	@ 0xff
 8002bc2:	d907      	bls.n	8002bd4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e08f      	b.n	8002cf4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	ea42 0103 	orr.w	r1, r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002bf2:	f023 030f 	bic.w	r3, r3, #15
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6851      	ldr	r1, [r2, #4]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6892      	ldr	r2, [r2, #8]
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68d2      	ldr	r2, [r2, #12]
 8002c04:	4311      	orrs	r1, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6992      	ldr	r2, [r2, #24]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c16:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d161      	bne.n	8002ce4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a38      	ldr	r2, [pc, #224]	@ (8002d04 <HAL_I2S_Init+0x274>)
 8002c24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a37      	ldr	r2, [pc, #220]	@ (8002d08 <HAL_I2S_Init+0x278>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2S_Init+0x1a4>
 8002c30:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <HAL_I2S_Init+0x27c>)
 8002c32:	e001      	b.n	8002c38 <HAL_I2S_Init+0x1a8>
 8002c34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	4932      	ldr	r1, [pc, #200]	@ (8002d08 <HAL_I2S_Init+0x278>)
 8002c40:	428a      	cmp	r2, r1
 8002c42:	d101      	bne.n	8002c48 <HAL_I2S_Init+0x1b8>
 8002c44:	4a31      	ldr	r2, [pc, #196]	@ (8002d0c <HAL_I2S_Init+0x27c>)
 8002c46:	e001      	b.n	8002c4c <HAL_I2S_Init+0x1bc>
 8002c48:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002c4c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002c50:	f023 030f 	bic.w	r3, r3, #15
 8002c54:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2b      	ldr	r2, [pc, #172]	@ (8002d08 <HAL_I2S_Init+0x278>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_I2S_Init+0x1d4>
 8002c60:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_I2S_Init+0x27c>)
 8002c62:	e001      	b.n	8002c68 <HAL_I2S_Init+0x1d8>
 8002c64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c68:	2202      	movs	r2, #2
 8002c6a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a25      	ldr	r2, [pc, #148]	@ (8002d08 <HAL_I2S_Init+0x278>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_I2S_Init+0x1ea>
 8002c76:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <HAL_I2S_Init+0x27c>)
 8002c78:	e001      	b.n	8002c7e <HAL_I2S_Init+0x1ee>
 8002c7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c8a:	d003      	beq.n	8002c94 <HAL_I2S_Init+0x204>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	e001      	b.n	8002ca0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002caa:	4313      	orrs	r3, r2
 8002cac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	897b      	ldrh	r3, [r7, #10]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ccc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002d08 <HAL_I2S_Init+0x278>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d101      	bne.n	8002cdc <HAL_I2S_Init+0x24c>
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <HAL_I2S_Init+0x27c>)
 8002cda:	e001      	b.n	8002ce0 <HAL_I2S_Init+0x250>
 8002cdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ce0:	897a      	ldrh	r2, [r7, #10]
 8002ce2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	0800300d 	.word	0x0800300d
 8002d00:	cccccccd 	.word	0xcccccccd
 8002d04:	08003121 	.word	0x08003121
 8002d08:	40003800 	.word	0x40003800
 8002d0c:	40003400 	.word	0x40003400

08002d10 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_I2S_Transmit_DMA+0x1a>
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e08a      	b.n	8002e44 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e082      	b.n	8002e44 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_I2S_Transmit_DMA+0x3e>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e07a      	b.n	8002e44 <HAL_I2S_Transmit_DMA+0x134>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2203      	movs	r2, #3
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d002      	beq.n	8002d82 <HAL_I2S_Transmit_DMA+0x72>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d10a      	bne.n	8002d98 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d96:	e005      	b.n	8002da4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	88fa      	ldrh	r2, [r7, #6]
 8002d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	88fa      	ldrh	r2, [r7, #6]
 8002da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da8:	4a28      	ldr	r2, [pc, #160]	@ (8002e4c <HAL_I2S_Transmit_DMA+0x13c>)
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db0:	4a27      	ldr	r2, [pc, #156]	@ (8002e50 <HAL_I2S_Transmit_DMA+0x140>)
 8002db2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db8:	4a26      	ldr	r2, [pc, #152]	@ (8002e54 <HAL_I2S_Transmit_DMA+0x144>)
 8002dba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002dc4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002dcc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002dd4:	f7fe fd46 	bl	8001864 <HAL_DMA_Start_IT>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00f      	beq.n	8002dfe <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	f043 0208 	orr.w	r2, r3, #8
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e022      	b.n	8002e44 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0202 	orr.w	r2, r2, #2
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d107      	bne.n	8002e42 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e40:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	08002eeb 	.word	0x08002eeb
 8002e50:	08002ea9 	.word	0x08002ea9
 8002e54:	08002f07 	.word	0x08002f07

08002e58 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10e      	bne.n	8002edc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0202 	bic.w	r2, r2, #2
 8002ecc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff ffc5 	bl	8002e6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff ffad 	bl	8002e58 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0203 	bic.w	r2, r2, #3
 8002f22:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3c:	f043 0208 	orr.w	r2, r3, #8
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7ff ffa5 	bl	8002e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	881a      	ldrh	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	1c9a      	adds	r2, r3, #2
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10e      	bne.n	8002fa6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f96:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ff63 	bl	8002e6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	1c9a      	adds	r2, r3, #2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10e      	bne.n	8003004 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ff4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff ff3e 	bl	8002e80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b04      	cmp	r3, #4
 8003026:	d13a      	bne.n	800309e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d109      	bne.n	8003046 <I2S_IRQHandler+0x3a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303c:	2b40      	cmp	r3, #64	@ 0x40
 800303e:	d102      	bne.n	8003046 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ffb4 	bl	8002fae <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304c:	2b40      	cmp	r3, #64	@ 0x40
 800304e:	d126      	bne.n	800309e <I2S_IRQHandler+0x92>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b20      	cmp	r3, #32
 800305c:	d11f      	bne.n	800309e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800306c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003090:	f043 0202 	orr.w	r2, r3, #2
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff fefb 	bl	8002e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d136      	bne.n	8003118 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d109      	bne.n	80030c8 <I2S_IRQHandler+0xbc>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030be:	2b80      	cmp	r3, #128	@ 0x80
 80030c0:	d102      	bne.n	80030c8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff45 	bl	8002f52 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d122      	bne.n	8003118 <I2S_IRQHandler+0x10c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d11b      	bne.n	8003118 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80030ee:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f043 0204 	orr.w	r2, r3, #4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff febe 	bl	8002e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003118:	bf00      	nop
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a92      	ldr	r2, [pc, #584]	@ (8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800313a:	4b92      	ldr	r3, [pc, #584]	@ (8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800313c:	e001      	b.n	8003142 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800313e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a8b      	ldr	r2, [pc, #556]	@ (8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003158:	4b8a      	ldr	r3, [pc, #552]	@ (8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800315a:	e001      	b.n	8003160 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800315c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800316c:	d004      	beq.n	8003178 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 8099 	bne.w	80032aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d107      	bne.n	8003192 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f925 	bl	80033dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f9c8 	bl	800353c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	2b40      	cmp	r3, #64	@ 0x40
 80031b4:	d13a      	bne.n	800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d035      	beq.n	800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80031ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031cc:	e001      	b.n	80031d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80031ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4969      	ldr	r1, [pc, #420]	@ (8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031da:	428b      	cmp	r3, r1
 80031dc:	d101      	bne.n	80031e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80031de:	4b69      	ldr	r3, [pc, #420]	@ (8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031e0:	e001      	b.n	80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80031e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f043 0202 	orr.w	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff fe34 	bl	8002e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b08      	cmp	r3, #8
 8003234:	f040 80c3 	bne.w	80033be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80bd 	beq.w	80033be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003252:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a49      	ldr	r2, [pc, #292]	@ (8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800325e:	4b49      	ldr	r3, [pc, #292]	@ (8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003260:	e001      	b.n	8003266 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4944      	ldr	r1, [pc, #272]	@ (8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800326e:	428b      	cmp	r3, r1
 8003270:	d101      	bne.n	8003276 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003272:	4b44      	ldr	r3, [pc, #272]	@ (8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003274:	e001      	b.n	800327a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003276:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800327a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800327e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003280:	2300      	movs	r3, #0
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f043 0204 	orr.w	r2, r3, #4
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fdf6 	bl	8002e94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032a8:	e089      	b.n	80033be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d107      	bne.n	80032c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8be 	bl	8003440 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d107      	bne.n	80032de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8fd 	bl	80034d8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e4:	2b40      	cmp	r3, #64	@ 0x40
 80032e6:	d12f      	bne.n	8003348 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d02a      	beq.n	8003348 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003300:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1e      	ldr	r2, [pc, #120]	@ (8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800330c:	4b1d      	ldr	r3, [pc, #116]	@ (8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800330e:	e001      	b.n	8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003310:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4919      	ldr	r1, [pc, #100]	@ (8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800331c:	428b      	cmp	r3, r1
 800331e:	d101      	bne.n	8003324 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003320:	4b18      	ldr	r3, [pc, #96]	@ (8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003322:	e001      	b.n	8003328 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003324:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003328:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800332c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f043 0202 	orr.w	r2, r3, #2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fda6 	bl	8002e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b08      	cmp	r3, #8
 8003350:	d136      	bne.n	80033c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d031      	beq.n	80033c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a07      	ldr	r2, [pc, #28]	@ (8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003366:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003368:	e001      	b.n	800336e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800336a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4902      	ldr	r1, [pc, #8]	@ (8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003376:	428b      	cmp	r3, r1
 8003378:	d106      	bne.n	8003388 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800337a:	4b02      	ldr	r3, [pc, #8]	@ (8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800337c:	e006      	b.n	800338c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800337e:	bf00      	nop
 8003380:	40003800 	.word	0x40003800
 8003384:	40003400 	.word	0x40003400
 8003388:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800338c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003390:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80033a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff fd6c 	bl	8002e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033bc:	e000      	b.n	80033c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033be:	bf00      	nop
}
 80033c0:	bf00      	nop
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	1c99      	adds	r1, r3, #2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6251      	str	r1, [r2, #36]	@ 0x24
 80033ee:	881a      	ldrh	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d113      	bne.n	8003436 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800341c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d106      	bne.n	8003436 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ffc9 	bl	80033c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	1c99      	adds	r1, r3, #2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6251      	str	r1, [r2, #36]	@ 0x24
 8003452:	8819      	ldrh	r1, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1d      	ldr	r2, [pc, #116]	@ (80034d0 <I2SEx_TxISR_I2SExt+0x90>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <I2SEx_TxISR_I2SExt+0x22>
 800345e:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <I2SEx_TxISR_I2SExt+0x94>)
 8003460:	e001      	b.n	8003466 <I2SEx_TxISR_I2SExt+0x26>
 8003462:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003466:	460a      	mov	r2, r1
 8003468:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d121      	bne.n	80034c6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a12      	ldr	r2, [pc, #72]	@ (80034d0 <I2SEx_TxISR_I2SExt+0x90>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <I2SEx_TxISR_I2SExt+0x50>
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <I2SEx_TxISR_I2SExt+0x94>)
 800348e:	e001      	b.n	8003494 <I2SEx_TxISR_I2SExt+0x54>
 8003490:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	490d      	ldr	r1, [pc, #52]	@ (80034d0 <I2SEx_TxISR_I2SExt+0x90>)
 800349c:	428b      	cmp	r3, r1
 800349e:	d101      	bne.n	80034a4 <I2SEx_TxISR_I2SExt+0x64>
 80034a0:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <I2SEx_TxISR_I2SExt+0x94>)
 80034a2:	e001      	b.n	80034a8 <I2SEx_TxISR_I2SExt+0x68>
 80034a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ff81 	bl	80033c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40003800 	.word	0x40003800
 80034d4:	40003400 	.word	0x40003400

080034d8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68d8      	ldr	r0, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	1c99      	adds	r1, r3, #2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80034f0:	b282      	uxth	r2, r0
 80034f2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d113      	bne.n	8003534 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800351a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ff4a 	bl	80033c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a20      	ldr	r2, [pc, #128]	@ (80035cc <I2SEx_RxISR_I2SExt+0x90>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <I2SEx_RxISR_I2SExt+0x16>
 800354e:	4b20      	ldr	r3, [pc, #128]	@ (80035d0 <I2SEx_RxISR_I2SExt+0x94>)
 8003550:	e001      	b.n	8003556 <I2SEx_RxISR_I2SExt+0x1a>
 8003552:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003556:	68d8      	ldr	r0, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	1c99      	adds	r1, r3, #2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003562:	b282      	uxth	r2, r0
 8003564:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d121      	bne.n	80035c2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a12      	ldr	r2, [pc, #72]	@ (80035cc <I2SEx_RxISR_I2SExt+0x90>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <I2SEx_RxISR_I2SExt+0x50>
 8003588:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <I2SEx_RxISR_I2SExt+0x94>)
 800358a:	e001      	b.n	8003590 <I2SEx_RxISR_I2SExt+0x54>
 800358c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	490d      	ldr	r1, [pc, #52]	@ (80035cc <I2SEx_RxISR_I2SExt+0x90>)
 8003598:	428b      	cmp	r3, r1
 800359a:	d101      	bne.n	80035a0 <I2SEx_RxISR_I2SExt+0x64>
 800359c:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <I2SEx_RxISR_I2SExt+0x94>)
 800359e:	e001      	b.n	80035a4 <I2SEx_RxISR_I2SExt+0x68>
 80035a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035a8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff03 	bl	80033c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40003800 	.word	0x40003800
 80035d0:	40003400 	.word	0x40003400

080035d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e267      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d075      	beq.n	80036de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035f2:	4b88      	ldr	r3, [pc, #544]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d00c      	beq.n	8003618 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fe:	4b85      	ldr	r3, [pc, #532]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003606:	2b08      	cmp	r3, #8
 8003608:	d112      	bne.n	8003630 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360a:	4b82      	ldr	r3, [pc, #520]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003616:	d10b      	bne.n	8003630 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	4b7e      	ldr	r3, [pc, #504]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d05b      	beq.n	80036dc <HAL_RCC_OscConfig+0x108>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d157      	bne.n	80036dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e242      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003638:	d106      	bne.n	8003648 <HAL_RCC_OscConfig+0x74>
 800363a:	4b76      	ldr	r3, [pc, #472]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a75      	ldr	r2, [pc, #468]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e01d      	b.n	8003684 <HAL_RCC_OscConfig+0xb0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x98>
 8003652:	4b70      	ldr	r3, [pc, #448]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a6f      	ldr	r2, [pc, #444]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b6d      	ldr	r3, [pc, #436]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6c      	ldr	r2, [pc, #432]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e00b      	b.n	8003684 <HAL_RCC_OscConfig+0xb0>
 800366c:	4b69      	ldr	r3, [pc, #420]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a68      	ldr	r2, [pc, #416]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b66      	ldr	r3, [pc, #408]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a65      	ldr	r2, [pc, #404]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 800367e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d013      	beq.n	80036b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fd fefa 	bl	8001484 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003694:	f7fd fef6 	bl	8001484 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	@ 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e207      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0xc0>
 80036b2:	e014      	b.n	80036de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fd fee6 	bl	8001484 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036bc:	f7fd fee2 	bl	8001484 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	@ 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e1f3      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	4b51      	ldr	r3, [pc, #324]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0xe8>
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d063      	beq.n	80037b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f6:	4b47      	ldr	r3, [pc, #284]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d11c      	bne.n	800373c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003702:	4b44      	ldr	r3, [pc, #272]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d116      	bne.n	800373c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	4b41      	ldr	r3, [pc, #260]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_RCC_OscConfig+0x152>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d001      	beq.n	8003726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e1c7      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003726:	4b3b      	ldr	r3, [pc, #236]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4937      	ldr	r1, [pc, #220]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	e03a      	b.n	80037b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d020      	beq.n	8003786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003744:	4b34      	ldr	r3, [pc, #208]	@ (8003818 <HAL_RCC_OscConfig+0x244>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374a:	f7fd fe9b 	bl	8001484 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003752:	f7fd fe97 	bl	8001484 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e1a8      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003764:	4b2b      	ldr	r3, [pc, #172]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003770:	4b28      	ldr	r3, [pc, #160]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4925      	ldr	r1, [pc, #148]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
 8003784:	e015      	b.n	80037b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003786:	4b24      	ldr	r3, [pc, #144]	@ (8003818 <HAL_RCC_OscConfig+0x244>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fd fe7a 	bl	8001484 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7fd fe76 	bl	8001484 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e187      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d036      	beq.n	800382c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <HAL_RCC_OscConfig+0x248>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fd fe5a 	bl	8001484 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d4:	f7fd fe56 	bl	8001484 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e167      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <HAL_RCC_OscConfig+0x240>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x200>
 80037f2:	e01b      	b.n	800382c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f4:	4b09      	ldr	r3, [pc, #36]	@ (800381c <HAL_RCC_OscConfig+0x248>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fa:	f7fd fe43 	bl	8001484 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003800:	e00e      	b.n	8003820 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003802:	f7fd fe3f 	bl	8001484 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d907      	bls.n	8003820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e150      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
 8003814:	40023800 	.word	0x40023800
 8003818:	42470000 	.word	0x42470000
 800381c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	4b88      	ldr	r3, [pc, #544]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ea      	bne.n	8003802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8097 	beq.w	8003968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b81      	ldr	r3, [pc, #516]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	4b7d      	ldr	r3, [pc, #500]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	4a7c      	ldr	r2, [pc, #496]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003858:	6413      	str	r3, [r2, #64]	@ 0x40
 800385a:	4b7a      	ldr	r3, [pc, #488]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386a:	4b77      	ldr	r3, [pc, #476]	@ (8003a48 <HAL_RCC_OscConfig+0x474>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d118      	bne.n	80038a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003876:	4b74      	ldr	r3, [pc, #464]	@ (8003a48 <HAL_RCC_OscConfig+0x474>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a73      	ldr	r2, [pc, #460]	@ (8003a48 <HAL_RCC_OscConfig+0x474>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003882:	f7fd fdff 	bl	8001484 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388a:	f7fd fdfb 	bl	8001484 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e10c      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	4b6a      	ldr	r3, [pc, #424]	@ (8003a48 <HAL_RCC_OscConfig+0x474>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d106      	bne.n	80038be <HAL_RCC_OscConfig+0x2ea>
 80038b0:	4b64      	ldr	r3, [pc, #400]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b4:	4a63      	ldr	r2, [pc, #396]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80038bc:	e01c      	b.n	80038f8 <HAL_RCC_OscConfig+0x324>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x30c>
 80038c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038cc:	f043 0304 	orr.w	r3, r3, #4
 80038d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80038de:	e00b      	b.n	80038f8 <HAL_RCC_OscConfig+0x324>
 80038e0:	4b58      	ldr	r3, [pc, #352]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e4:	4a57      	ldr	r2, [pc, #348]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ec:	4b55      	ldr	r3, [pc, #340]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f0:	4a54      	ldr	r2, [pc, #336]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038f2:	f023 0304 	bic.w	r3, r3, #4
 80038f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003900:	f7fd fdc0 	bl	8001484 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003906:	e00a      	b.n	800391e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f7fd fdbc 	bl	8001484 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0cb      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391e:	4b49      	ldr	r3, [pc, #292]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ee      	beq.n	8003908 <HAL_RCC_OscConfig+0x334>
 800392a:	e014      	b.n	8003956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392c:	f7fd fdaa 	bl	8001484 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003932:	e00a      	b.n	800394a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003934:	f7fd fda6 	bl	8001484 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e0b5      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ee      	bne.n	8003934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	4b39      	ldr	r3, [pc, #228]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	4a38      	ldr	r2, [pc, #224]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003966:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a1 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003972:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b08      	cmp	r3, #8
 800397c:	d05c      	beq.n	8003a38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d141      	bne.n	8003a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	4b31      	ldr	r3, [pc, #196]	@ (8003a4c <HAL_RCC_OscConfig+0x478>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fd fd7a 	bl	8001484 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003994:	f7fd fd76 	bl	8001484 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e087      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a6:	4b27      	ldr	r3, [pc, #156]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69da      	ldr	r2, [r3, #28]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	019b      	lsls	r3, r3, #6
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	3b01      	subs	r3, #1
 80039cc:	041b      	lsls	r3, r3, #16
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	491b      	ldr	r1, [pc, #108]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039dc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a4c <HAL_RCC_OscConfig+0x478>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fd fd4f 	bl	8001484 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fd fd4b 	bl	8001484 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e05c      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fc:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x416>
 8003a08:	e054      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0a:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <HAL_RCC_OscConfig+0x478>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fd fd38 	bl	8001484 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fd fd34 	bl	8001484 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e045      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x444>
 8003a36:	e03d      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e038      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ec>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d028      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d121      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d11a      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a80:	4013      	ands	r3, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d111      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a96:	085b      	lsrs	r3, r3, #1
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800

08003ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0cc      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b68      	ldr	r3, [pc, #416]	@ (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d90c      	bls.n	8003b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b65      	ldr	r3, [pc, #404]	@ (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b63      	ldr	r3, [pc, #396]	@ (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0b8      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b18:	4b59      	ldr	r3, [pc, #356]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a58      	ldr	r2, [pc, #352]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b30:	4b53      	ldr	r3, [pc, #332]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a52      	ldr	r2, [pc, #328]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3c:	4b50      	ldr	r3, [pc, #320]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	494d      	ldr	r1, [pc, #308]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d044      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	4b47      	ldr	r3, [pc, #284]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d119      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e07f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b82:	4b3f      	ldr	r3, [pc, #252]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b92:	4b3b      	ldr	r3, [pc, #236]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e067      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba2:	4b37      	ldr	r3, [pc, #220]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4934      	ldr	r1, [pc, #208]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb4:	f7fd fc66 	bl	8001484 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bbc:	f7fd fc62 	bl	8001484 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e04f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 020c 	and.w	r2, r3, #12
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d1eb      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be4:	4b25      	ldr	r3, [pc, #148]	@ (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d20c      	bcs.n	8003c0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b22      	ldr	r3, [pc, #136]	@ (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b20      	ldr	r3, [pc, #128]	@ (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e032      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c18:	4b19      	ldr	r3, [pc, #100]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4916      	ldr	r1, [pc, #88]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c36:	4b12      	ldr	r3, [pc, #72]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	490e      	ldr	r1, [pc, #56]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c4a:	f000 f821 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	490a      	ldr	r1, [pc, #40]	@ (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	5ccb      	ldrb	r3, [r1, r3]
 8003c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c62:	4a09      	ldr	r2, [pc, #36]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c66:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fd fbc6 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023c00 	.word	0x40023c00
 8003c80:	40023800 	.word	0x40023800
 8003c84:	08004150 	.word	0x08004150
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	20000004 	.word	0x20000004

08003c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c94:	b090      	sub	sp, #64	@ 0x40
 8003c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca8:	4b59      	ldr	r3, [pc, #356]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d00d      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	f200 80a1 	bhi.w	8003dfc <HAL_RCC_GetSysClockFreq+0x16c>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x3a>
 8003cc2:	e09b      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc4:	4b53      	ldr	r3, [pc, #332]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cc8:	e09b      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cca:	4b53      	ldr	r3, [pc, #332]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cce:	e098      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cda:	4b4d      	ldr	r3, [pc, #308]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d028      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	2200      	movs	r2, #0
 8003cee:	623b      	str	r3, [r7, #32]
 8003cf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4b47      	ldr	r3, [pc, #284]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cfc:	fb03 f201 	mul.w	r2, r3, r1
 8003d00:	2300      	movs	r3, #0
 8003d02:	fb00 f303 	mul.w	r3, r0, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	4a43      	ldr	r2, [pc, #268]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d0a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d10:	460a      	mov	r2, r1
 8003d12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d16:	4413      	add	r3, r2
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	61fa      	str	r2, [r7, #28]
 8003d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d2a:	f7fc fa4d 	bl	80001c8 <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4613      	mov	r3, r2
 8003d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d36:	e053      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d38:	4b35      	ldr	r3, [pc, #212]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	099b      	lsrs	r3, r3, #6
 8003d3e:	2200      	movs	r2, #0
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	617a      	str	r2, [r7, #20]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d4a:	f04f 0b00 	mov.w	fp, #0
 8003d4e:	4652      	mov	r2, sl
 8003d50:	465b      	mov	r3, fp
 8003d52:	f04f 0000 	mov.w	r0, #0
 8003d56:	f04f 0100 	mov.w	r1, #0
 8003d5a:	0159      	lsls	r1, r3, #5
 8003d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d60:	0150      	lsls	r0, r2, #5
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	ebb2 080a 	subs.w	r8, r2, sl
 8003d6a:	eb63 090b 	sbc.w	r9, r3, fp
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d82:	ebb2 0408 	subs.w	r4, r2, r8
 8003d86:	eb63 0509 	sbc.w	r5, r3, r9
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	00eb      	lsls	r3, r5, #3
 8003d94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d98:	00e2      	lsls	r2, r4, #3
 8003d9a:	4614      	mov	r4, r2
 8003d9c:	461d      	mov	r5, r3
 8003d9e:	eb14 030a 	adds.w	r3, r4, sl
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	eb45 030b 	adc.w	r3, r5, fp
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db6:	4629      	mov	r1, r5
 8003db8:	028b      	lsls	r3, r1, #10
 8003dba:	4621      	mov	r1, r4
 8003dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	028a      	lsls	r2, r1, #10
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	60fa      	str	r2, [r7, #12]
 8003dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd4:	f7fc f9f8 	bl	80001c8 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	3301      	adds	r3, #1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003df0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dfa:	e002      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3740      	adds	r7, #64	@ 0x40
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	017d7840 	.word	0x017d7840

08003e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b03      	ldr	r3, [pc, #12]	@ (8003e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000000 	.word	0x20000000

08003e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e38:	f7ff fff0 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0a9b      	lsrs	r3, r3, #10
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4903      	ldr	r1, [pc, #12]	@ (8003e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40023800 	.word	0x40023800
 8003e58:	08004160 	.word	0x08004160

08003e5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d035      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e84:	4b62      	ldr	r3, [pc, #392]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e8a:	f7fd fafb 	bl	8001484 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e92:	f7fd faf7 	bl	8001484 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0b0      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	019a      	lsls	r2, r3, #6
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	071b      	lsls	r3, r3, #28
 8003ebc:	4955      	ldr	r1, [pc, #340]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ec4:	4b52      	ldr	r3, [pc, #328]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eca:	f7fd fadb 	bl	8001484 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ed2:	f7fd fad7 	bl	8001484 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e090      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8083 	beq.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b44      	ldr	r3, [pc, #272]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	4a43      	ldr	r2, [pc, #268]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f0e:	4b41      	ldr	r3, [pc, #260]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f26:	f7fd faad 	bl	8001484 <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2e:	f7fd faa9 	bl	8001484 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e062      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003f40:	4b35      	ldr	r3, [pc, #212]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f4c:	4b31      	ldr	r3, [pc, #196]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f54:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d02f      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d028      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f74:	4b29      	ldr	r3, [pc, #164]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f7a:	4b28      	ldr	r3, [pc, #160]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f80:	4a24      	ldr	r2, [pc, #144]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f86:	4b23      	ldr	r3, [pc, #140]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d114      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fd fa77 	bl	8001484 <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fd fa73 	bl	8001484 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e02a      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb0:	4b18      	ldr	r3, [pc, #96]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ee      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc8:	d10d      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003fca:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fde:	490d      	ldr	r1, [pc, #52]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]
 8003fe4:	e005      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4a0a      	ldr	r2, [pc, #40]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ff0:	6093      	str	r3, [r2, #8]
 8003ff2:	4b08      	ldr	r3, [pc, #32]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ff4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffe:	4905      	ldr	r1, [pc, #20]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004000:	4313      	orrs	r3, r2
 8004002:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	42470068 	.word	0x42470068
 8004014:	40023800 	.word	0x40023800
 8004018:	40007000 	.word	0x40007000
 800401c:	42470e40 	.word	0x42470e40

08004020 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d13f      	bne.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800403e:	4b24      	ldr	r3, [pc, #144]	@ (80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004046:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004054:	d12f      	bne.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004056:	4b1f      	ldr	r3, [pc, #124]	@ (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004058:	617b      	str	r3, [r7, #20]
          break;
 800405a:	e02f      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800405c:	4b1c      	ldr	r3, [pc, #112]	@ (80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004068:	d108      	bne.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800406a:	4b19      	ldr	r3, [pc, #100]	@ (80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004072:	4a19      	ldr	r2, [pc, #100]	@ (80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	e007      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800407c:	4b14      	ldr	r3, [pc, #80]	@ (80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004084:	4a15      	ldr	r2, [pc, #84]	@ (80040dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800408c:	4b10      	ldr	r3, [pc, #64]	@ (80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80040a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a6:	0f1b      	lsrs	r3, r3, #28
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b2:	617b      	str	r3, [r7, #20]
          break;
 80040b4:	e002      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
          break;
 80040ba:	bf00      	nop
        }
      }
      break;
 80040bc:	e000      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80040be:	bf00      	nop
    }
  }
  return frequency;
 80040c0:	697b      	ldr	r3, [r7, #20]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	00bb8000 	.word	0x00bb8000
 80040d8:	017d7840 	.word	0x017d7840
 80040dc:	00f42400 	.word	0x00f42400

080040e0 <memset>:
 80040e0:	4402      	add	r2, r0
 80040e2:	4603      	mov	r3, r0
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d100      	bne.n	80040ea <memset+0xa>
 80040e8:	4770      	bx	lr
 80040ea:	f803 1b01 	strb.w	r1, [r3], #1
 80040ee:	e7f9      	b.n	80040e4 <memset+0x4>

080040f0 <__libc_init_array>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004128 <__libc_init_array+0x38>)
 80040f4:	4c0d      	ldr	r4, [pc, #52]	@ (800412c <__libc_init_array+0x3c>)
 80040f6:	1b64      	subs	r4, r4, r5
 80040f8:	10a4      	asrs	r4, r4, #2
 80040fa:	2600      	movs	r6, #0
 80040fc:	42a6      	cmp	r6, r4
 80040fe:	d109      	bne.n	8004114 <__libc_init_array+0x24>
 8004100:	4d0b      	ldr	r5, [pc, #44]	@ (8004130 <__libc_init_array+0x40>)
 8004102:	4c0c      	ldr	r4, [pc, #48]	@ (8004134 <__libc_init_array+0x44>)
 8004104:	f000 f818 	bl	8004138 <_init>
 8004108:	1b64      	subs	r4, r4, r5
 800410a:	10a4      	asrs	r4, r4, #2
 800410c:	2600      	movs	r6, #0
 800410e:	42a6      	cmp	r6, r4
 8004110:	d105      	bne.n	800411e <__libc_init_array+0x2e>
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	f855 3b04 	ldr.w	r3, [r5], #4
 8004118:	4798      	blx	r3
 800411a:	3601      	adds	r6, #1
 800411c:	e7ee      	b.n	80040fc <__libc_init_array+0xc>
 800411e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004122:	4798      	blx	r3
 8004124:	3601      	adds	r6, #1
 8004126:	e7f2      	b.n	800410e <__libc_init_array+0x1e>
 8004128:	08004178 	.word	0x08004178
 800412c:	08004178 	.word	0x08004178
 8004130:	08004178 	.word	0x08004178
 8004134:	0800417c 	.word	0x0800417c

08004138 <_init>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr

08004144 <_fini>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr
